- name: Deploy application to AKS cluster
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: /usr/bin/python3
    docker_image_name: "{{ lookup('env', 'DOCKER_IMAGE_NAME') }}"
    discord_webhook_url: "{{ lookup('env', 'DISCORD_WEBHOOK_URL') }}"  # Assurez-vous que cette variable est bien d√©finie dans votre environnement

  tasks:
    - name: Ensure the default namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: default

    - name: Add Prometheus Helm repository
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts

    - name: Install kube-prometheus-stack
      kubernetes.core.helm:
        name: prometheus
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: prometheus
        create_namespace: true
        values:
          prometheus:
            service:
              type: LoadBalancer
          grafana:
            service:
              type: LoadBalancer

    - name: Create deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: dvga
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: dvga
            template:
              metadata:
                labels:
                  app: dvga
              spec:
                containers:
                  - name: dvga-container
                    image: "{{ docker_image_name }}:latest"
                    ports:
                      - containerPort: 5013

    - name: Create Service for dvga
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: dvga-service
            namespace: default
            labels:
              app: dvga
          spec:
            selector:
              app: dvga
            ports:
              - name: http
                port: 5013
                targetPort: 5013

    - name: Deploy ServiceMonitor for dvga
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition: "{{ lookup('file', 'dvga-servicemonitor.yaml') }}"

    - name: Create ConfigMap for Prometheus
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
            namespace: prometheus
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:9090']
                - job_name: 'dvga-metrics'
                  metrics_path: '/metrics'
                  static_configs:
                    - targets: ['dvga-service.default.svc.cluster.local:5013']

    - name: Restart Prometheus StatefulSet to apply ConfigMap
      command: >
        kubectl rollout restart statefulset prometheus-prometheus-kube-prometheus-prometheus -n prometheus

    - name: V√©rifier les vuln√©rabilit√©s critiques dans Prometheus
      command: |
        curl -s http://4.172.126.83:9090/api/v1/query \
        --data-urlencode "query=ALERTS{alertstate='firing'}"
      register: prometheus_alerts
      failed_when: prometheus_alerts.rc != 0

    - name: Analyser les r√©sultats de Prometheus
      set_fact:
        alert_results: "{{ prometheus_alerts.stdout | from_json }}"

    - name: Envoyer une alerte Discord pour chaque alerte
      when: alert_results.status == 'success' and alert_results.data.result | length > 0
      with_items: "{{ alert_results.data.result }}"
      vars:
        alert: "{{ item.metric }}"
      block:
        - name: Construire le message d'alerte
          set_fact:
            discord_message: |
              üö® **Alerte d√©tect√©e : {{ alert.alertname }}**
              - √âtat : {{ alert.alertstate }}
              - Gravit√© : {{ alert.severity }}
              - D√©tails : {{ alert }}

        - name: Envoyer une alerte √† Discord
          uri:
            url: "{{ discord_webhook_url }}"
            method: POST
            body: '{"content": "{{ discord_message }}"}'
            headers:
              Content-Type: "application/json"
            status_code: 204
