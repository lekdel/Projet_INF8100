- name: Deploy application to AKS cluster
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: /usr/bin/python3
    docker_image_name: "{{ lookup('env', 'DOCKER_IMAGE_NAME') }}"
    discord_webhook_url: "{{ lookup('env', 'DISCORD_WEBHOOK_URL') }}"  

  tasks:
    - name: Ensure the default namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: default

    - name: Add Prometheus Helm repository
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts

    - name: Install kube-prometheus-stack
      kubernetes.core.helm:
        name: prometheus
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: prometheus
        create_namespace: true
        values:
          prometheus:
            service:
              type: LoadBalancer
          grafana:
            service:
              type: LoadBalancer

    - name: DÃ©finir un ResourceQuota pour limiter les ressources dans le namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        state: present
        definition: "{{ lookup('file', 'resource-quota.yaml') }}"

    - name: DÃ©finir un LimitRange pour imposer des limites par dÃ©faut sur les pods
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        state: present
        definition: "{{ lookup('file', 'limit-range.yaml') }}"

    - name: Create deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: dvga
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: dvga
            template:
              metadata:
                labels:
                  app: dvga
              spec:
                containers:
                  - name: dvga-container
                    image: "{{ docker_image_name }}:latest"
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 5013  

    - name: Create Service for dvga
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: dvga-service
            namespace: default
            labels:
              app: dvga
          spec:
            type: LoadBalancer
            selector:
              app: dvga
            ports:
              - name: http
                port: 5013
                targetPort: 5013
    - name: Create Ingress for dvga
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: dvga-ingress
            namespace: default
            annotations:
              kubernetes.io/ingress.class: "nginx"
          spec:
            rules:
              - host: log8100-projet-dvga.nbj-dev.me
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: dvga-service
                          port:
                            number: 5013

    - name: Deploy ServiceMonitor for dvga
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        definition: "{{ lookup('file', 'dvga-servicemonitor.yaml') }}"

    - name: Create ConfigMap for Prometheus
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
            namespace: prometheus
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:9090']
                - job_name: 'dvga-metrics'
                  metrics_path: '/metrics'
                  static_configs:
                    - targets: ['dvga-service.default.svc.cluster.local:5013']

    - name: Restart Prometheus StatefulSet to apply ConfigMap
      command: >
        kubectl rollout restart statefulset prometheus-prometheus-kube-prometheus-prometheus -n prometheus

    # - name: VÃ©rifier les vulnÃ©rabilitÃ©s critiques dans Prometheus
    #   command: |
    #     curl -s http://4.172.126.83:9090/api/v1/query \
    #     --data-urlencode "query=ALERTS{alertstate='firing'}"
    #   register: prometheus_alerts
    #   failed_when: prometheus_alerts.rc != 0

    # - name: Analyser les rÃ©sultats de Prometheus
    #   set_fact:
    #     alert_results: "{{ prometheus_alerts.stdout | from_json }}"

    # - name: Construire le message d'alerte pour chaque alerte
    #   set_fact:
    #     discord_message: |
    #       ðŸš¨ **Alerte dÃ©tectÃ©e : {{ item.metric.alertname }}**
    #       - Ã‰tat : {{ item.metric.alertstate }}
    #       - GravitÃ© : {{ item.metric.severity }}
    #       - DÃ©tails : {{ item.metric }}
    #   with_items: "{{ alert_results.data.result }}"
    #   when: alert_results.status == 'success' and alert_results.data.result | length > 0

    # - name: Envoyer une alerte Ã  Discord pour chaque alerte
    #   uri:
    #     url: "{{ discord_webhook_url }}"
    #     method: POST
    #     body: '{"content": "{{ discord_message }}"}'
    #     headers:
    #       Content-Type: "application/json"
    #     status_code: 204
    #   with_items: "{{ alert_results.data.result }}"
    #   when: alert_results.status == 'success' and alert_results.data.result | length > 0

